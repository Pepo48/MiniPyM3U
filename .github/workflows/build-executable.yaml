name: Build Executable

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.5'  

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build the executable
      run: |
        pyinstaller --onefile --add-data="m3u.py:." --add-data="m3u_url_parser.py:." app.py

    - name: Set up environment
      shell: bash
      run: |
        if [[ ${{ runner.os }} == 'Windows' ]]; then exe=".exe"; else exe=""; fi
        echo "artifact_name=dist/app$exe" >> $GITHUB_ENV
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}
        path: ${{ env.artifact_name }}

  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Delete existing release
      run: |
        gh release delete latest --yes || true
        git tag -d latest || true
        git push origin :refs/tags/latest || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create or Update Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest
        release_name: Latest Release
        draft: false
        prerelease: false

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        merge-multiple: true

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -f "./artifacts/app" ]; then
          echo "Uploading ./artifacts/app"
          gh release upload latest "./artifacts/app" --clobber
        else
          echo "No app file found in ./artifacts"
        fi

        if [ -f "./artifacts/app.exe" ]; then
          echo "Uploading ./artifacts/app.exe"
          gh release upload latest "./artifacts/app.exe" --clobber
        else
          echo "No app.exe file found in ./artifacts"
        fi